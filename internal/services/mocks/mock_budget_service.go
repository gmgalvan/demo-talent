// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demo-talent/internal/services (interfaces: BudgetServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/demo-talent/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockBudgetServiceInterface is a mock of BudgetServiceInterface interface.
type MockBudgetServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetServiceInterfaceMockRecorder
}

// MockBudgetServiceInterfaceMockRecorder is the mock recorder for MockBudgetServiceInterface.
type MockBudgetServiceInterfaceMockRecorder struct {
	mock *MockBudgetServiceInterface
}

// NewMockBudgetServiceInterface creates a new mock instance.
func NewMockBudgetServiceInterface(ctrl *gomock.Controller) *MockBudgetServiceInterface {
	mock := &MockBudgetServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBudgetServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetServiceInterface) EXPECT() *MockBudgetServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBudgetServiceInterface) Create(arg0 context.Context, arg1 *entities.Budget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBudgetServiceInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBudgetServiceInterface)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBudgetServiceInterface) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBudgetServiceInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBudgetServiceInterface)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockBudgetServiceInterface) GetByID(arg0 context.Context, arg1 string) (*entities.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBudgetServiceInterfaceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBudgetServiceInterface)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockBudgetServiceInterface) List(arg0 context.Context, arg1, arg2 int) ([]entities.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBudgetServiceInterfaceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBudgetServiceInterface)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockBudgetServiceInterface) Update(arg0 context.Context, arg1 *entities.Budget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBudgetServiceInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBudgetServiceInterface)(nil).Update), arg0, arg1)
}
