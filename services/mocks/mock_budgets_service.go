// Code generated by MockGen. DO NOT EDIT.
// Source: budgets.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/demo-talent/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockBudgetService is a mock of BudgetService interface.
type MockBudgetService struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetServiceMockRecorder
}

// MockBudgetServiceMockRecorder is the mock recorder for MockBudgetService.
type MockBudgetServiceMockRecorder struct {
	mock *MockBudgetService
}

// NewMockBudgetService creates a new mock instance.
func NewMockBudgetService(ctrl *gomock.Controller) *MockBudgetService {
	mock := &MockBudgetService{ctrl: ctrl}
	mock.recorder = &MockBudgetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetService) EXPECT() *MockBudgetServiceMockRecorder {
	return m.recorder
}

// CreateBudget mocks base method.
func (m *MockBudgetService) CreateBudget(ctx context.Context, b *entities.Budget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBudget indicates an expected call of CreateBudget.
func (mr *MockBudgetServiceMockRecorder) CreateBudget(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockBudgetService)(nil).CreateBudget), ctx, b)
}

// DeleteBudget mocks base method.
func (m *MockBudgetService) DeleteBudget(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudget", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBudget indicates an expected call of DeleteBudget.
func (mr *MockBudgetServiceMockRecorder) DeleteBudget(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudget", reflect.TypeOf((*MockBudgetService)(nil).DeleteBudget), ctx, id)
}

// GetBudgetByID mocks base method.
func (m *MockBudgetService) GetBudgetByID(ctx context.Context, id string) (*entities.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetByID indicates an expected call of GetBudgetByID.
func (mr *MockBudgetServiceMockRecorder) GetBudgetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetByID", reflect.TypeOf((*MockBudgetService)(nil).GetBudgetByID), ctx, id)
}

// UpdateBudget mocks base method.
func (m *MockBudgetService) UpdateBudget(ctx context.Context, b *entities.Budget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBudget", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBudget indicates an expected call of UpdateBudget.
func (mr *MockBudgetServiceMockRecorder) UpdateBudget(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBudget", reflect.TypeOf((*MockBudgetService)(nil).UpdateBudget), ctx, b)
}
