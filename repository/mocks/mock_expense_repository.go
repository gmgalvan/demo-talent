// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demo-talent/repository (interfaces: ExpenseRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/demo-talent/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockExpenseRepositoryInterface is a mock of ExpenseRepositoryInterface interface.
type MockExpenseRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryInterfaceMockRecorder
}

// MockExpenseRepositoryInterfaceMockRecorder is the mock recorder for MockExpenseRepositoryInterface.
type MockExpenseRepositoryInterfaceMockRecorder struct {
	mock *MockExpenseRepositoryInterface
}

// NewMockExpenseRepositoryInterface creates a new mock instance.
func NewMockExpenseRepositoryInterface(ctrl *gomock.Controller) *MockExpenseRepositoryInterface {
	mock := &MockExpenseRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepositoryInterface) EXPECT() *MockExpenseRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseRepositoryInterface) Create(arg0 context.Context, arg1 *entities.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockExpenseRepositoryInterface) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockExpenseRepositoryInterface) GetByID(arg0 context.Context, arg1 string) (*entities.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entities.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockExpenseRepositoryInterface) List(arg0 context.Context, arg1, arg2 int) ([]entities.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockExpenseRepositoryInterface) Update(arg0 context.Context, arg1 *entities.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).Update), arg0, arg1)
}
